Programming in Java

Strings. //check more from the book for detailed info on String Handling. (Black Book)

Strings are immutable and Final.
Once the string is created, the compiler will point it to one memory space.
once we modify the string or change the value, a new string will be created. the old one will not be replaces with new one.

String can be created in 2 ways.
1. using New Operator.
ex.

String s1 = new String("Hello");

or

String s1 = new String();
s1 = "Welcome";


_______________________________________________________

Using String literals. (uses the concept of String Pool)

Ex. String s1 = "Hello";


Difference between these two are:

Using new keyword, when we create new strings, lets say
a = "Hello"
b = "Hello"

It will create two separate words in heap memory and assign them accordingly

but when strings are created using String literals, if there is a previously existing string with the same name,
it'll refer the same thing to the new string.

_______________________________________________________

If there are no reference to Strings created, then the created string will simply roam in the heap memory
so, whenever we apply / make changes to the string, make sure we point some variable to it.

_______________________________________________________

String Buffer and String Builder.
These are not immutable. We can make changes.

String buffer is thread safe. meaning, when once thread is executed, other ones must wait.
cause of this concept, it is little slower

String builder is not thread safe.

_______________________________________________________

// using strings:

String s1 = "Hello World";
s1.concat("!!!");
SOUT(s1);       // output is "Hello World"

// Using stringBuffer

StringBuffer s1 = new StringBuffer();
s1.append("!!!");
SOUT(s1);       // output is "Hello World!!!"


same case for string builder.

_______________________________________________________

methods in String Builder.

append
charAt
delete - used to delete part of string.
s1.delete(1,3) -> EL will be deleted.

insert -> s1.insert(1,"A");     -> A will be added in 1st position.



